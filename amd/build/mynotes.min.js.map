{"version":3,"file":"mynotes.min.js","sources":["../src/mynotes.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module\n *\n * @module     block_mynotes/mynotes\n * @copyright  2025 Matej Pal <matej.pal@agiledrop.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\nimport * as Repository from 'block_mynotes/local/mynotes/repository';\nimport { renderNote, renderPagination } from 'block_mynotes/local/mynotes/noteRenderer';\n\nlet currentOffset = 0;\nconst limit = 5; // You want to show 5 notes per page.\n\n/**\n * Initialize the dynamic form for adding a note and fetch existing notes.\n *\n * @param {string} selector - The CSS selector for the form container.\n * @param {Function} formClass - The class used to instantiate the dynamic form.\n * @param {number} instanceId - The unique instance ID of this block.\n */\nexport const addNote = (selector, formClass, instanceId) => {\n    const instanceSelector = `${selector}[data-block-instance-id=\"${instanceId}\"]`;\n    const formElement = document.querySelector(instanceSelector);\n    if (!formElement) {\n        window.console.warn('Form element not found for instance ' + instanceId);\n        return;\n    }\n    if (formElement.dataset.initialized === \"1\") {\n        return;\n    }\n    formElement.dataset.initialized = \"1\";\n\n    const form = new DynamicForm(formElement, formClass);\n    form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n        e.preventDefault();\n        const response = e.detail;\n        const submitButton = formElement.querySelector('button[type=\"submit\"]');\n        if (submitButton) {\n            submitButton.disabled = true;\n        }\n        window.console.log('Form submitted: ' + JSON.stringify(response));\n        Repository.addNote(response.userid, response.note)\n            .then(function(res) {\n                window.console.log(JSON.stringify(res));\n                // After a successful submission, reset pagination to page 1.\n                currentOffset = 0;\n                fetchAndDisplayNotes();\n                if (submitButton) {\n                    submitButton.disabled = false;\n                }\n                const inputField = formElement.querySelector('textarea[name=\"note\"]');\n                if (inputField) {\n                    inputField.value = '';\n                }\n            })\n            .catch(error => {\n                window.console.error('Error saving note:', error);\n                if (submitButton) {\n                    submitButton.disabled = false;\n                }\n            });\n    });\n\n    fetchAndDisplayNotes();\n};\n\n/**\n * Fetches and displays notes in all elements with data-region=\"notes-container\".\n * Applies pagination and renders each note using the renderNote function.\n */\nconst fetchAndDisplayNotes = () => {\n    const notesContainers = document.querySelectorAll('[data-region=\"notes-container\"]');\n    if (!notesContainers.length) {\n        return;\n    }\n    Repository.getNotes(limit + 1, currentOffset)\n        .then(response => {\n            // Unwrap the notes array.\n            const notesAll = response.data ? response.data.notes : response.notes;\n            // Use only the first \"limit\" items for display.\n            const notes = notesAll.slice(0, limit);\n            notesContainers.forEach(notesContainer => {\n                notesContainer.innerHTML = '';\n                if (!notes || notes.length === 0) {\n                    notesContainer.innerHTML = '<p>No notes yet.</p>';\n                } else {\n                    notes.forEach(note => {\n                        const noteElement = renderNote(note, onEditCallback, onDeleteCallback);\n                        notesContainer.appendChild(noteElement);\n                    });\n                    // Render pagination using the total count (notesAll.length).\n                    const paginationControls = renderPagination(currentOffset, limit, notesAll.length, (newOffset) => {\n                        currentOffset = newOffset;\n                        fetchAndDisplayNotes();\n                    });\n                    notesContainer.appendChild(paginationControls);\n                }\n            });\n        })\n        .catch(error => window.console.error('Error fetching notes:', error));\n};\n\n/**\n * Callback for editing a note.\n * Hides the current note content and displays an editing interface with a textarea, Save, and Cancel buttons.\n *\n * @param {Object} note - The note object.\n * @param {HTMLElement} noteElement - The container element for the note.\n * @param {HTMLElement} contentContainer - The element that displays the note text.\n * @param {HTMLElement} noteFooter - The footer element containing the note's date and action buttons.\n */\nconst onEditCallback = (note, noteElement, contentContainer, noteFooter) => {\n    // Hide the note content to show the edit interface.\n    contentContainer.style.display = 'none';\n    // Check if an edit container already exists.\n    let editContainer = noteElement.querySelector('.edit-container');\n    if (!editContainer) {\n        // Create a new edit container.\n        editContainer = document.createElement('div');\n        editContainer.classList.add('edit-container');\n\n        // Create a textarea pre-filled with the current note text.\n        const textarea = document.createElement('textarea');\n        textarea.classList.add('edit-textarea');\n        textarea.value = note.note;\n\n        // Create the Save button.\n        const saveButton = document.createElement('button');\n        saveButton.textContent = 'Save';\n        saveButton.addEventListener('click', () => {\n            const newNote = textarea.value.trim();\n            if (newNote === '') {\n                alert('Note cannot be empty.');\n                return;\n            }\n            Repository.editNote(note.id, newNote)\n                .then((res) => {\n                    window.console.log('Note updated:', res);\n                    fetchAndDisplayNotes();\n                })\n                .catch((error) => {\n                    window.console.error('Error updating note:', error);\n                });\n        });\n\n        // Create the Cancel button.\n        const cancelButton = document.createElement('button');\n        cancelButton.textContent = 'Cancel';\n        cancelButton.addEventListener('click', () => {\n            editContainer.style.display = 'none';\n            contentContainer.style.display = '';\n        });\n\n        // Assemble the edit container.\n        editContainer.appendChild(textarea);\n        editContainer.appendChild(saveButton);\n        editContainer.appendChild(cancelButton);\n        // Insert the edit container before the note footer.\n        noteElement.insertBefore(editContainer, noteFooter);\n    } else {\n        // If an edit container already exists, show it and reset the textarea.\n        editContainer.style.display = '';\n        const textarea = editContainer.querySelector('textarea');\n        textarea.value = note.note;\n    }\n};\n\n/**\n * Callback for deleting a note.\n * Asks for confirmation and then calls the repository to delete the note.\n *\n * @param {Object} note - The note object.\n */\nconst onDeleteCallback = (note) => {\n    if (confirm('Are you sure you want to delete this note?')) {\n        Repository.deleteNote(note.id)\n            .then((res) => {\n                window.console.log('Note deleted:', res);\n                fetchAndDisplayNotes();\n            })\n            .catch((error) => {\n                window.console.error('Error deleting note:', error);\n            });\n    }\n};\n"],"names":["currentOffset","selector","formClass","instanceId","instanceSelector","formElement","document","querySelector","window","console","warn","dataset","initialized","form","DynamicForm","addEventListener","events","FORM_SUBMITTED","e","preventDefault","response","detail","submitButton","disabled","log","JSON","stringify","Repository","addNote","userid","note","then","res","fetchAndDisplayNotes","inputField","value","catch","error","notesContainers","querySelectorAll","length","getNotes","limit","notesAll","data","notes","slice","forEach","notesContainer","innerHTML","noteElement","onEditCallback","onDeleteCallback","appendChild","paginationControls","newOffset","contentContainer","noteFooter","style","display","editContainer","createElement","classList","add","textarea","saveButton","textContent","newNote","trim","editNote","id","alert","cancelButton","insertBefore","confirm","deleteNote"],"mappings":"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"}