{"version":3,"file":"mynotes.min.js","sources":["../src/mynotes.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module greetings\n *\n * @module     block_mynotes/mynotes\n * @copyright  2025 Matej Pal <matej.pal@agiledrop.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from 'block_mynotes/local/mynotes/selectors';\nimport DynamicForm from 'core_form/dynamicform';\nimport * as Repository from 'block_mynotes/local/mynotes/repository';\n// import * as Str from 'core/str';\n\nlet currentOffset = 0;\nconst limit = 5; // You want to show 5 notes per page.\n\n/**\n *\n * @param {Number} userid\n */\nexport const init = (userid) => {\n    registerEventListeners(userid);\n};\n\nconst registerEventListeners = (userid) => {\n    document.addEventListener('click', e =>  {\n\n        if (e.target.closest(Selectors.actions.showAlertButton)) {\n            window.alert('Hello!');\n        }\n\n        window.console.log(e.target);\n        window.console.log(userid);\n    });\n};\n\nexport const addNote = (selector, formClass, instanceId) => {\n    const instanceSelector = `${selector}[data-block-instance-id=\"${instanceId}\"]`;\n    const formElement = document.querySelector(instanceSelector);\n    if (!formElement) {\n        window.console.warn('Form element not found for instance ' + instanceId);\n        return;\n    }\n    if (formElement.dataset.initialized === \"1\") {\n        return;\n    }\n    formElement.dataset.initialized = \"1\";\n\n    const form = new DynamicForm(formElement, formClass);\n    form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n        e.preventDefault();\n        const response = e.detail;\n        const submitButton = formElement.querySelector('button[type=\"submit\"]');\n        if (submitButton) {\n            submitButton.disabled = true;\n        }\n        window.console.log('Form submitted: ' + JSON.stringify(response));\n        Repository.addNote(response.userid, response.note)\n            .then(function(res) {\n                window.console.log(JSON.stringify(res));\n                // After a successful submission, reset pagination to page 1.\n                currentOffset = 0;\n                fetchAndDisplayNotes();\n                if (submitButton) {\n                    submitButton.disabled = false;\n                }\n                const inputField = formElement.querySelector('textarea[name=\"note\"]');\n                if (inputField) {\n                    inputField.value = '';\n                }\n            })\n            .catch(error => {\n                window.console.error('Error saving note:', error);\n                if (submitButton) {\n                    submitButton.disabled = false;\n                }\n            });\n    });\n\n    fetchAndDisplayNotes();\n};\n\n/**\n * Fetch and display notes in all notes containers on the page.\n */\nconst fetchAndDisplayNotes = () => {\n    const notesContainers = document.querySelectorAll('[data-region=\"notes-container\"]');\n    if (!notesContainers.length) {\n        return;\n    }\n    Repository.getNotes(limit, currentOffset)\n        .then(response => {\n            // If the response is wrapped, use response.data.notes.\n            const notes = response.data ? response.data.notes : response.notes;\n            notesContainers.forEach(notesContainer => {\n                notesContainer.innerHTML = '';\n                if (!notes || notes.length === 0) {\n                    notesContainer.innerHTML = '<p>No notes yet.</p>';\n                } else {\n                    notes.forEach(note => {\n                        // Create the note element container.\n                        const noteElement = document.createElement('div');\n                        noteElement.classList.add('note-item');\n\n                        // Create a container for note content.\n                        const contentContainer = document.createElement('div');\n                        contentContainer.classList.add('note-content');\n                        contentContainer.textContent = note.note;\n\n                        // Create a footer for date and action buttons.\n                        const noteFooter = document.createElement('div');\n                        noteFooter.classList.add('note-footer');\n\n                        // Create element for the creation date.\n                        const dateElem = document.createElement('small');\n                        dateElem.textContent = note.timecreated;\n\n                        // Create a container for action links.\n                        const actionsContainer = document.createElement('div');\n                        actionsContainer.classList.add('note-actions');\n\n                        // Create the Edit link as an anchor.\n                        const editLink = document.createElement('a');\n                        editLink.setAttribute('role', 'button');\n                        editLink.setAttribute('href', '#');\n                        editLink.classList.add('edit-note');\n\n// Use M.util.image_url to get the icon URL.\n// Replace 't/edit' with the appropriate icon identifier (e.g., 't/pencil') if needed.\n                        const editIconUrl = M.util.image_url('t/edit', 'core').toString();\n                        const editAltText = M.util.get_string('edit', 'core');\n\n// Set innerHTML to render the icon image.\n                        editLink.innerHTML = `<img src=\"${editIconUrl}\" alt=\"${editAltText}\" style=\"width:16px; height:16px;\">`;\n\n// Attach the event listener to handle the edit action.\n                        editLink.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            // Hide the content container.\n                            contentContainer.style.display = 'none';\n                            // Create or show the edit container.\n                            let editContainer = noteElement.querySelector('.edit-container');\n                            if (!editContainer) {\n                                editContainer = document.createElement('div');\n                                editContainer.classList.add('edit-container');\n\n                                // Create a textarea pre-filled with the current note text.\n                                const textarea = document.createElement('textarea');\n                                textarea.classList.add('edit-textarea');\n                                textarea.value = note.note;\n\n                                // Create the Save button.\n                                const saveButton = document.createElement('button');\n                                saveButton.textContent = 'Save';\n                                saveButton.addEventListener('click', () => {\n                                    const newNote = textarea.value.trim();\n                                    if (newNote === '') {\n                                        alert('Note cannot be empty.');\n                                        return;\n                                    }\n                                    Repository.editNote(note.id, newNote)\n                                        .then(function(res) {\n                                            window.console.log('Note updated:', res);\n                                            fetchAndDisplayNotes();\n                                        })\n                                        .catch(error => window.console.error('Error updating note:', error));\n                                });\n\n                                // Create the Cancel button.\n                                const cancelButton = document.createElement('button');\n                                cancelButton.textContent = 'Cancel';\n                                cancelButton.addEventListener('click', () => {\n                                    editContainer.style.display = 'none';\n                                    contentContainer.style.display = '';\n                                });\n\n                                editContainer.appendChild(textarea);\n                                editContainer.appendChild(saveButton);\n                                editContainer.appendChild(cancelButton);\n                                noteElement.insertBefore(editContainer, noteFooter);\n                            } else {\n                                editContainer.style.display = '';\n                                // Reset textarea value.\n                                const textarea = editContainer.querySelector('textarea');\n                                textarea.value = note.note;\n                            }\n                        });\n\n                        // Create the Delete link.\n                        const deleteLink = document.createElement('a');\n                        deleteLink.setAttribute('role', 'button');\n                        deleteLink.setAttribute('href', '#');\n                        deleteLink.dataset.noteId = note.id;\n                        deleteLink.classList.add('delete-note');\n                        const iconUrl = M.util.image_url('t/delete', 'core').toString();\n                        const altText = M.util.get_string('delete', 'core');\n                        deleteLink.innerHTML = `<img src=\"${iconUrl}\" alt=\"${altText}\" style=\"width:16px; height:16px;\">`;\n                        deleteLink.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            if (confirm('Are you sure you want to delete this note?')) {\n                                Repository.deleteNote(note.id)\n                                    .then(function(res) {\n                                        window.console.log('Note deleted:', res);\n                                        fetchAndDisplayNotes();\n                                    })\n                                    .catch(error => window.console.error('Error deleting note:', error));\n                            }\n                        });\n\n                        // Append edit and delete links.\n                        actionsContainer.appendChild(editLink);\n                        actionsContainer.appendChild(deleteLink);\n\n                        // Assemble the footer.\n                        noteFooter.appendChild(dateElem);\n                        noteFooter.appendChild(actionsContainer);\n\n                        // Assemble the note element.\n                        noteElement.appendChild(contentContainer);\n                        noteElement.appendChild(noteFooter);\n                        notesContainer.appendChild(noteElement);\n                    });\n\n                    // Add pagination controls (same as before).\n                    const paginationContainer = document.createElement('div');\n                    paginationContainer.classList.add('pagination-controls');\n\n                    const prevButton = document.createElement('button');\n                    prevButton.textContent = 'Previous';\n                    prevButton.disabled = (currentOffset === 0);\n                    prevButton.addEventListener('click', () => {\n                        if (currentOffset >= limit) {\n                            currentOffset -= limit;\n                            fetchAndDisplayNotes();\n                        }\n                    });\n\n                    const nextButton = document.createElement('button');\n                    nextButton.textContent = 'Next';\n                    nextButton.disabled = (notes.length < limit);\n                    nextButton.addEventListener('click', () => {\n                        currentOffset += limit;\n                        fetchAndDisplayNotes();\n                    });\n\n                    paginationContainer.appendChild(prevButton);\n                    paginationContainer.appendChild(nextButton);\n                    notesContainer.appendChild(paginationContainer);\n                }\n            });\n        })\n        .catch(error => window.console.error('Error fetching notes:', error));\n};\n"],"names":["currentOffset","userid","registerEventListeners","document","addEventListener","e","target","closest","Selectors","actions","showAlertButton","window","alert","console","log","selector","formClass","instanceId","instanceSelector","formElement","querySelector","warn","dataset","initialized","form","DynamicForm","events","FORM_SUBMITTED","preventDefault","response","detail","submitButton","disabled","JSON","stringify","Repository","addNote","note","then","res","fetchAndDisplayNotes","inputField","value","catch","error","notesContainers","querySelectorAll","length","getNotes","notes","data","forEach","notesContainer","innerHTML","noteElement","createElement","classList","add","contentContainer","textContent","noteFooter","dateElem","timecreated","actionsContainer","editLink","setAttribute","editIconUrl","M","util","image_url","toString","editAltText","get_string","style","display","editContainer","textarea","saveButton","newNote","trim","editNote","id","cancelButton","appendChild","insertBefore","deleteLink","noteId","iconUrl","altText","confirm","deleteNote","paginationContainer","prevButton","nextButton"],"mappings":"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"}