define("block_mynotes/mynotes",["exports","core_form/dynamicform","block_mynotes/local/mynotes/repository","block_mynotes/local/mynotes/noteRenderer"],(function(_exports,_dynamicform,Repository,_noteRenderer){var obj;
/**
   * TODO describe module
   *
   * @module     block_mynotes/mynotes
   * @copyright  2025 Matej Pal <matej.pal@agiledrop.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.addNote=void 0,_dynamicform=(obj=_dynamicform)&&obj.__esModule?obj:{default:obj},Repository=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(Repository);let currentOffset=0;_exports.addNote=(selector,formClass,instanceId)=>{const instanceSelector=`${selector}[data-block-instance-id="${instanceId}"]`,formElement=document.querySelector(instanceSelector);if(!formElement)return void window.console.warn("Form element not found for instance "+instanceId);if("1"===formElement.dataset.initialized)return;formElement.dataset.initialized="1";const form=new _dynamicform.default(formElement,formClass);form.addEventListener(form.events.FORM_SUBMITTED,(e=>{e.preventDefault();const response=e.detail,submitButton=formElement.querySelector('button[type="submit"]');submitButton&&(submitButton.disabled=!0),window.console.log("Form submitted: "+JSON.stringify(response)),Repository.addNote(response.userid,response.note).then((function(res){window.console.log(JSON.stringify(res)),currentOffset=0,fetchAndDisplayNotes(),submitButton&&(submitButton.disabled=!1);const inputField=formElement.querySelector('textarea[name="note"]');inputField&&(inputField.value="")})).catch((error=>{window.console.error("Error saving note:",error),submitButton&&(submitButton.disabled=!1)}))})),fetchAndDisplayNotes()};const fetchAndDisplayNotes=()=>{const notesContainers=document.querySelectorAll('[data-region="notes-container"]');notesContainers.length&&Repository.getNotes(6,currentOffset).then((response=>{const notesAll=response.data?response.data.notes:response.notes,notes=notesAll.slice(0,5);notesContainers.forEach((notesContainer=>{if(notesContainer.innerHTML="",notes&&0!==notes.length){notes.forEach((note=>{const noteElement=(0,_noteRenderer.renderNote)(note,onEditCallback,onDeleteCallback);notesContainer.appendChild(noteElement)}));const paginationControls=(0,_noteRenderer.renderPagination)(currentOffset,5,notesAll.length,(newOffset=>{currentOffset=newOffset,fetchAndDisplayNotes()}));notesContainer.appendChild(paginationControls)}else notesContainer.innerHTML="<p>No notes yet.</p>"}))})).catch((error=>window.console.error("Error fetching notes:",error)))},onEditCallback=(note,noteElement,contentContainer,noteFooter)=>{contentContainer.style.display="none";let editContainer=noteElement.querySelector(".edit-container");if(editContainer){editContainer.style.display="";editContainer.querySelector("textarea").value=note.note}else{editContainer=document.createElement("div"),editContainer.classList.add("edit-container");const textarea=document.createElement("textarea");textarea.classList.add("edit-textarea"),textarea.value=note.note;const saveButton=document.createElement("button");saveButton.textContent="Save",saveButton.addEventListener("click",(()=>{const newNote=textarea.value.trim();""!==newNote?Repository.editNote(note.id,newNote).then((res=>{window.console.log("Note updated:",res),fetchAndDisplayNotes()})).catch((error=>{window.console.error("Error updating note:",error)})):alert("Note cannot be empty.")}));const cancelButton=document.createElement("button");cancelButton.textContent="Cancel",cancelButton.addEventListener("click",(()=>{editContainer.style.display="none",contentContainer.style.display=""})),editContainer.appendChild(textarea),editContainer.appendChild(saveButton),editContainer.appendChild(cancelButton),noteElement.insertBefore(editContainer,noteFooter)}},onDeleteCallback=note=>{confirm("Are you sure you want to delete this note?")&&Repository.deleteNote(note.id).then((res=>{window.console.log("Note deleted:",res),fetchAndDisplayNotes()})).catch((error=>{window.console.error("Error deleting note:",error)}))}}));

//# sourceMappingURL=mynotes.min.js.map