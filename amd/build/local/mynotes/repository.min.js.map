{"version":3,"file":"repository.min.js","sources":["../../../src/local/mynotes/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module repository\n *\n * @module     block_mynotes/local/mynotes/repository\n * @copyright  2025 Matej Pal <matej.pal@agiledrop.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\n\n/**\n *\n * @param {Number} userid\n * @returns\n */\nexport const getUser = (userid = 0) => {\n    return fetchMany([{\n        methodname: 'core_user_get_users_by_field',\n        args: {field: 'id', values: [userid]}\n    }])[0];\n};\n\n/**\n *\n * @param {number} userid\n * @param {string} note\n * @returns\n */\nexport const addNote = (userid, note) => {\n    return fetchMany([{\n        methodname: 'block_mynotes_add_note',\n        args: {userid, note}\n    }])[0];\n};\n\n/**\n * Fetch user notes from the server with pagination.\n * @param {number} limit - Number of notes per page.\n * @param {number} offset - Starting offset.\n * @returns {Promise}\n */\nexport const getNotes = (limit = 5, offset = 0) => {\n    return fetchMany([{\n        methodname: 'block_mynotes_get_notes',\n        args: { limit, offset }\n    }])[0];\n};\n\n/**\n * Delete a note by note ID.\n * @param {number} noteId - The ID of the note to delete.\n * @returns {Promise}\n */\nexport const deleteNote = (noteId) => {\n    return fetchMany([{\n        methodname: 'block_mynotes_delete_note',\n        args: { noteid: noteId }\n    }])[0];\n};\n\n/**\n * Edit a note by note ID.\n * @param {number} noteId - The ID of the note to delete.\n * @param {string} newNote\n * @returns {Promise}\n */\nexport const editNote = (noteId, newNote) => {\n    return fetchMany([{\n        methodname: 'block_mynotes_edit_note',\n        args: { noteid: noteId, note: newNote }\n    }])[0];\n};\n"],"names":["userid","methodname","args","field","values","note","limit","offset","noteId","noteid","newNote"],"mappings":"4QA8BuB,eAACA,8DAAS,SACtB,cAAU,CAAC,CACdC,WAAY,+BACZC,KAAM,CAACC,MAAO,KAAMC,OAAQ,CAACJ,YAC7B,qBASe,CAACA,OAAQK,QACrB,cAAU,CAAC,CACdJ,WAAY,yBACZC,KAAM,CAACF,OAAAA,OAAQK,KAAAA,SACf,qBASgB,eAACC,6DAAQ,EAAGC,8DAAS,SAClC,cAAU,CAAC,CACdN,WAAY,0BACZC,KAAM,CAAEI,MAAAA,MAAOC,OAAAA,WACf,wBAQmBC,SAChB,cAAU,CAAC,CACdP,WAAY,4BACZC,KAAM,CAAEO,OAAQD,WAChB,qBASgB,CAACA,OAAQE,WACtB,cAAU,CAAC,CACdT,WAAY,0BACZC,KAAM,CAAEO,OAAQD,OAAQH,KAAMK,YAC9B"}