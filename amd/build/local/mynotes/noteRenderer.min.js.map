{"version":3,"file":"noteRenderer.min.js","sources":["../../../src/local/mynotes/noteRenderer.js"],"sourcesContent":["/**\n * Renders a single note element with its content, footer, and action buttons.\n *\n * @param {Object} note - The note object (with id, note, and timecreated properties).\n * @param {Function} onEdit - Callback to call when the edit action is triggered.\n *                              It receives (note, noteElement, contentContainer, noteFooter).\n * @param {Function} onDelete - Callback to call when the delete action is triggered.\n *                              It receives (note).\n * @returns {HTMLElement} - The rendered note element.\n */\nexport const renderNote = (note, onEdit, onDelete) => {\n    // Create the main container for the note.\n    const noteElement = document.createElement('div');\n    noteElement.classList.add('note-item');\n\n    // Create a container to display the note content.\n    const contentContainer = document.createElement('div');\n    contentContainer.classList.add('note-content');\n    contentContainer.textContent = note.note;\n\n    // Create a footer container to hold the creation date and action buttons.\n    const noteFooter = document.createElement('div');\n    noteFooter.classList.add('note-footer');\n\n    // Create an element to display the creation date.\n    const dateElem = document.createElement('small');\n    dateElem.textContent = note.timecreated;\n\n    // Create a container for the action links (Edit and Delete).\n    const actionsContainer = document.createElement('div');\n    actionsContainer.classList.add('note-actions');\n\n    // --- Create the Edit action ---\n    const editLink = document.createElement('a');\n    editLink.setAttribute('role', 'button');\n    editLink.setAttribute('href', '#');\n    editLink.classList.add('edit-note');\n\n    // Use Moodle's utility to get the URL for the edit icon.\n    const editIconUrl = M.util.image_url('t/edit', 'core').toString();\n    // Get the translated string for the alt attribute.\n    const editAltText = M.util.get_string('edit', 'core');\n    // Set the inner HTML to display the icon.\n    editLink.innerHTML = `<img src=\"${editIconUrl}\" alt=\"${editAltText}\" style=\"width:16px; height:16px;\">`;\n\n    // When the edit link is clicked, call the onEdit callback.\n    editLink.addEventListener('click', (e) => {\n        e.preventDefault();\n        // Hide the current content so the edit interface can show.\n        contentContainer.style.display = 'none';\n        // Call the onEdit callback with necessary parameters.\n        onEdit(note, noteElement, contentContainer, noteFooter);\n    });\n\n    // --- Create the Delete action ---\n    const deleteLink = document.createElement('a');\n    deleteLink.setAttribute('role', 'button');\n    deleteLink.setAttribute('href', '#');\n    deleteLink.dataset.noteId = note.id;\n    deleteLink.classList.add('delete-note');\n\n    const deleteIconUrl = M.util.image_url('t/delete', 'core').toString();\n    const deleteAltText = M.util.get_string('delete', 'core');\n    deleteLink.innerHTML = `<img src=\"${deleteIconUrl}\" alt=\"${deleteAltText}\" style=\"width:16px; height:16px;\">`;\n\n    // When the delete link is clicked, call the onDelete callback.\n    deleteLink.addEventListener('click', (e) => {\n        e.preventDefault();\n        onDelete(note);\n    });\n\n    // Append the edit and delete actions to the actions container.\n    actionsContainer.appendChild(editLink);\n    actionsContainer.appendChild(deleteLink);\n\n    // Assemble the footer: put the date and the actions together.\n    noteFooter.appendChild(dateElem);\n    noteFooter.appendChild(actionsContainer);\n\n    // Assemble the main note element: content on top, footer below.\n    noteElement.appendChild(contentContainer);\n    noteElement.appendChild(noteFooter);\n\n    return noteElement;\n};\n\n/**\n * Renders pagination controls.\n *\n * @param {number} currentOffset - The current offset (starting record).\n * @param {number} limit - Number of records per page.\n * @param {number} totalCount - Total number of records returned (including the extra one).\n * @param {Function} onPageChange - Callback function called with the new offset when a page button is clicked.\n * @returns {HTMLElement} - The pagination container element.\n */\nexport const renderPagination = (currentOffset, limit, totalCount, onPageChange) => {\n    const paginationContainer = document.createElement('div');\n    paginationContainer.classList.add('pagination-controls');\n\n    // Create the Previous button.\n    const prevButton = document.createElement('button');\n    prevButton.textContent = 'Previous';\n    prevButton.disabled = (currentOffset === 0);\n    prevButton.addEventListener('click', () => {\n        const newOffset = currentOffset - limit;\n        if (newOffset >= 0) {\n            onPageChange(newOffset);\n        }\n    });\n\n    // Create the Next button.\n    const nextButton = document.createElement('button');\n    nextButton.textContent = 'Next';\n    // If we fetched limit+1 records, then totalCount > limit means there is a next page.\n    // If totalCount <= limit, disable Next.\n    nextButton.disabled = (totalCount <= limit);\n    nextButton.addEventListener('click', () => {\n        const newOffset = currentOffset + limit;\n        onPageChange(newOffset);\n    });\n\n    paginationContainer.appendChild(prevButton);\n    paginationContainer.appendChild(nextButton);\n\n    return paginationContainer;\n};\n\n"],"names":["note","onEdit","onDelete","noteElement","document","createElement","classList","add","contentContainer","textContent","noteFooter","dateElem","timecreated","actionsContainer","editLink","setAttribute","editIconUrl","M","util","image_url","toString","editAltText","get_string","innerHTML","addEventListener","e","preventDefault","style","display","deleteLink","dataset","noteId","id","deleteIconUrl","deleteAltText","appendChild","currentOffset","limit","totalCount","onPageChange","paginationContainer","prevButton","disabled","newOffset","nextButton"],"mappings":"mNAU0B,CAACA,KAAMC,OAAQC,kBAE/BC,YAAcC,SAASC,cAAc,OAC3CF,YAAYG,UAAUC,IAAI,mBAGpBC,iBAAmBJ,SAASC,cAAc,OAChDG,iBAAiBF,UAAUC,IAAI,gBAC/BC,iBAAiBC,YAAcT,KAAKA,WAG9BU,WAAaN,SAASC,cAAc,OAC1CK,WAAWJ,UAAUC,IAAI,qBAGnBI,SAAWP,SAASC,cAAc,SACxCM,SAASF,YAAcT,KAAKY,kBAGtBC,iBAAmBT,SAASC,cAAc,OAChDQ,iBAAiBP,UAAUC,IAAI,sBAGzBO,SAAWV,SAASC,cAAc,KACxCS,SAASC,aAAa,OAAQ,UAC9BD,SAASC,aAAa,OAAQ,KAC9BD,SAASR,UAAUC,IAAI,mBAGjBS,YAAcC,EAAEC,KAAKC,UAAU,SAAU,QAAQC,WAEjDC,YAAcJ,EAAEC,KAAKI,WAAW,OAAQ,QAE9CR,SAASS,UAAa,aAAYP,qBAAqBK,iDAGvDP,SAASU,iBAAiB,SAAUC,IAChCA,EAAEC,iBAEFlB,iBAAiBmB,MAAMC,QAAU,OAEjC3B,OAAOD,KAAMG,YAAaK,iBAAkBE,qBAI1CmB,WAAazB,SAASC,cAAc,KAC1CwB,WAAWd,aAAa,OAAQ,UAChCc,WAAWd,aAAa,OAAQ,KAChCc,WAAWC,QAAQC,OAAS/B,KAAKgC,GACjCH,WAAWvB,UAAUC,IAAI,qBAEnB0B,cAAgBhB,EAAEC,KAAKC,UAAU,WAAY,QAAQC,WACrDc,cAAgBjB,EAAEC,KAAKI,WAAW,SAAU,eAClDO,WAAWN,UAAa,aAAYU,uBAAuBC,mDAG3DL,WAAWL,iBAAiB,SAAUC,IAClCA,EAAEC,iBACFxB,SAASF,SAIba,iBAAiBsB,YAAYrB,UAC7BD,iBAAiBsB,YAAYN,YAG7BnB,WAAWyB,YAAYxB,UACvBD,WAAWyB,YAAYtB,kBAGvBV,YAAYgC,YAAY3B,kBACxBL,YAAYgC,YAAYzB,YAEjBP,uCAYqB,CAACiC,cAAeC,MAAOC,WAAYC,sBACzDC,oBAAsBpC,SAASC,cAAc,OACnDmC,oBAAoBlC,UAAUC,IAAI,6BAG5BkC,WAAarC,SAASC,cAAc,UAC1CoC,WAAWhC,YAAc,WACzBgC,WAAWC,SAA8B,IAAlBN,cACvBK,WAAWjB,iBAAiB,SAAS,WAC3BmB,UAAYP,cAAgBC,MAC9BM,WAAa,GACbJ,aAAaI,oBAKfC,WAAaxC,SAASC,cAAc,iBAC1CuC,WAAWnC,YAAc,OAGzBmC,WAAWF,SAAYJ,YAAcD,MACrCO,WAAWpB,iBAAiB,SAAS,KAEjCe,aADkBH,cAAgBC,UAItCG,oBAAoBL,YAAYM,YAChCD,oBAAoBL,YAAYS,YAEzBJ"}